{
    "Description": "Neo4j on AWS - creates a variable number of EC2 Ubuntu machines, a VPC, elastic IP addresses, and deploys the Neo4j Graph Database cluster on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {
        "AWSRegionArch2AMI": {
            "ap-northeast-1": {
                "64": "ami-06302e6ac02fc6c3e"
            },
            "ap-southeast-1": {
                "64": "ami-0ae3b1104eed0d04c"
            },
            "ap-south-1": {
                "64": "ami-0284a2c822c6c3b9e"
            },
            "eu-central-1": {
                "64": "ami-01c3d234360b93e5d"
            },
            "eu-west-1": {
                "64": "ami-0d7656f1b46ca9e7e"
            },
            "sa-east-1": {
                "64": "ami-06b4c3ac60b242457"
            },
            "us-east-1": {
                "64": "ami-0b7914d1dfef90465"
            },
            "us-east-2": {
                "64": "ami-0e8145923643f75ad"
            },
            "us-west-1": {
                "64": "ami-0babbbbf2f70e2683"
            },
            "us-west-2": {
                "64": "ami-0969943ae3ba4b7f4"
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "r4.large",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "x1e.16xlarge",
                "x1e.8xlarge",
                "x1e.4xlarge",
                "x1e.2xlarge",
                "x1e.xlarge",
                "x1.16xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type."
        },
        "ClusterNodes": {
            "Description": "Number of core cluster node VMs",
            "Type": "Number",
            "Default": 3,
            "MinValue": 3,
            "MaxValue": 7
        },
        "ReadReplicas": {
            "Description": "Number of read replicas in the cluster",
            "Type": "Number",
            "Default": 0,
            "MinValue": 0,
            "MaxValue": 5
        },
        "SSHKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "AllowedPattern": ".+"
        },
        "NetworkWhitelist": {
            "Description": " The IP address range that can be used to connect to Neo4j",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.  For example, 0.0.0.0/0 for open internet access."
        },
        "Password": {
            "NoEcho": true,
            "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
            "Type": "String",
            "MinLength": 8,
            "MaxLength": 40,
            "AllowedPattern": "^[a-zA-Z0-9\\.-]+$"
        },
        "VolumeType": {
            "Description": "What kind of storage to attach",
            "Type": "String",
            "Default": "gp2",
            "AllowedValues": [
                "io1",
                "gp2",
                "st1"
            ]
        },
        "EncryptDataVolume": {
            "Description": "Should EBS storage be encrypted?  Default is yes.",
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "VolumeSizeGB": {
            "Description": "How much EBS storage is allocated to each cluster node, in GiB",
            "Type": "Number",
            "Default": "100",
            "MinValue": "10",
            "MaxValue": "1000",
            "ConstraintDescription": "Must be a valid EBS disk size in GiB."
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Cluster Configuration"
                    },
                    "Parameters": [
                        "ClusterNodes",
                        "ReadReplicas"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "InstanceType",
                        "VolumeType",
                        "VolumeSizeGB",
                        "EncryptDataVolume"
                    ]
                },
                {
                    "Label": {
                        "default": "Access Control"
                    },
                    "Parameters": [
                        "SSHKeyName",
                        "NetworkWhitelist",
                        "Password"
                    ]
                }
            ]
        },
        "AWS::CloudFormation::Designer": {
            "a17fb2d1-71f7-4a11-97ef-12f12f857bf5": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1350,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "c495b0d6-3e9b-454c-8252-9d1d60827651": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1470,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "76daeb39-ae23-49ea-93db-f9ac47fe733d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1590,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "c495b0d6-3e9b-454c-8252-9d1d60827651"
                ]
            },
            "aced6b9e-c5c4-47c7-a137-0c961f83e6fa": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1710,
                    "y": 90
                },
                "z": 1,
                "embeds": []
            },
            "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918": {
                "size": {
                    "width": 1230,
                    "height": 1230
                },
                "position": {
                    "x": 60,
                    "y": 90
                },
                "z": 1,
                "embeds": [
                    "b4b9b1b0-006d-4975-b7d5-1d7f98b0f366",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b66c528a-223a-4b86-86dd-d1a60d0b6c93",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                ]
            },
            "b4b9b1b0-006d-4975-b7d5-1d7f98b0f366": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1140,
                    "y": 150
                },
                "z": 2,
                "parent": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                "embeds": [],
                "iscontainedinside": [
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                ]
            },
            "b1913c57-ce14-4b5e-84f7-b0d5ed866c74": {
                "size": {
                    "width": 600,
                    "height": 600
                },
                "position": {
                    "x": 90,
                    "y": 150
                },
                "z": 2,
                "parent": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                "embeds": [
                    "eaa5255e-665c-42fe-af28-5e80cc555bfa",
                    "475865d2-dede-46c3-8c33-db1bb4af8289",
                    "f2b779bf-bc08-48dd-b7cf-7ebbc7f35f3d",
                    "8c1baa7d-d799-48e9-9ac8-29d17cb13285",
                    "051f966c-815d-4bff-b405-015d94fcb304",
                    "dc86fcc3-249e-49de-912a-b82031ac0c8b",
                    "a110120c-eb07-45a8-8c77-6df07acd4a13",
                    "434fdde5-067b-4734-83a1-7b19aa6b8e35",
                    "07dd2b35-f958-4917-84c3-fdee7e1147e4",
                    "0982d403-3dd4-4ce4-8e0e-fc1f447d29a9",
                    "d50f9015-7800-4a7d-be39-6f7bc296a136",
                    "71f0eaa8-ebdd-46fe-9c8a-cdd770092365",
                    "9d1c85ec-7b06-4ae7-b62e-9eae3605bf04",
                    "4ef074a8-ea34-4cd5-a76c-157d0493bf54",
                    "5c885d68-d6dd-44c9-9dc3-5b6ff1126b3b"
                ],
                "iscontainedinside": [
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                ]
            },
            "eaa5255e-665c-42fe-af28-5e80cc555bfa": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 210
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "475865d2-dede-46c3-8c33-db1bb4af8289": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 240,
                    "y": 210
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "f2b779bf-bc08-48dd-b7cf-7ebbc7f35f3d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 330
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "8c1baa7d-d799-48e9-9ac8-29d17cb13285": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 240,
                    "y": 330
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "051f966c-815d-4bff-b405-015d94fcb304": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 360,
                    "y": 210
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "dc86fcc3-249e-49de-912a-b82031ac0c8b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 360,
                    "y": 330
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "a110120c-eb07-45a8-8c77-6df07acd4a13": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 450
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "434fdde5-067b-4734-83a1-7b19aa6b8e35": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 240,
                    "y": 450
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "07dd2b35-f958-4917-84c3-fdee7e1147e4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 360,
                    "y": 450
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "0982d403-3dd4-4ce4-8e0e-fc1f447d29a9": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 210
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "d50f9015-7800-4a7d-be39-6f7bc296a136": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 330
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "71f0eaa8-ebdd-46fe-9c8a-cdd770092365": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 480,
                    "y": 450
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "9d1c85ec-7b06-4ae7-b62e-9eae3605bf04": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 570
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "4ef074a8-ea34-4cd5-a76c-157d0493bf54": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 240,
                    "y": 570
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "5c885d68-d6dd-44c9-9dc3-5b6ff1126b3b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 360,
                    "y": 570
                },
                "z": 3,
                "parent": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                "embeds": [],
                "iscontainedinside": [
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74",
                    "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                ]
            },
            "b66c528a-223a-4b86-86dd-d1a60d0b6c93": {
                "size": {
                    "width": 240,
                    "height": 240
                },
                "position": {
                    "x": 570,
                    "y": 930
                },
                "z": 2,
                "parent": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                "embeds": [
                    "b7fafa36-b1bf-4434-816f-d83aff06b6a1"
                ],
                "iscontainedinside": [
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                ]
            },
            "30af5ae6-553b-4b39-88c2-94e74e8f6d58": {
                "source": {
                    "id": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                },
                "target": {
                    "id": "aced6b9e-c5c4-47c7-a137-0c961f83e6fa"
                },
                "z": 1
            },
            "b7fafa36-b1bf-4434-816f-d83aff06b6a1": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 600,
                    "y": 990
                },
                "z": 3,
                "parent": "b66c528a-223a-4b86-86dd-d1a60d0b6c93",
                "embeds": [],
                "isassociatedwith": [
                    "aced6b9e-c5c4-47c7-a137-0c961f83e6fa"
                ],
                "iscontainedinside": [
                    "b66c528a-223a-4b86-86dd-d1a60d0b6c93",
                    "b66c528a-223a-4b86-86dd-d1a60d0b6c93",
                    "b66c528a-223a-4b86-86dd-d1a60d0b6c93"
                ],
                "dependson": [
                    "30af5ae6-553b-4b39-88c2-94e74e8f6d58"
                ]
            },
            "049a51f6-244b-4564-92dd-7b4e26c39f53": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 770,
                    "y": 410
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "baf37ea7-6e8f-4201-b4c6-85085aa83e75": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 410
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "1402d479-c92d-428a-b90c-949c6df1564d": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 990,
                    "y": 320
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "d8c812f9-0aa5-4e3f-b573-3e404daab2b9": {
                "size": {
                    "width": 330,
                    "height": 330
                },
                "position": {
                    "x": 750,
                    "y": 150
                },
                "z": 2,
                "parent": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                "embeds": [
                    "3d3aab22-dfc3-4999-af8d-422f5723175b",
                    "049a51f6-244b-4564-92dd-7b4e26c39f53",
                    "1baf0bf1-e412-4cfa-b409-01e1cb84e7f0",
                    "baf37ea7-6e8f-4201-b4c6-85085aa83e75",
                    "05193dd2-0e47-4629-bfea-93db2f6604a7",
                    "df5ca911-72a6-497c-8c58-22add5b716da"
                ],
                "iscontainedinside": [
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                ]
            },
            "3d3aab22-dfc3-4999-af8d-422f5723175b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 210
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "1baf0bf1-e412-4cfa-b409-01e1cb84e7f0": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 210
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "05193dd2-0e47-4629-bfea-93db2f6604a7": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 780,
                    "y": 330
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "df5ca911-72a6-497c-8c58-22add5b716da": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 900,
                    "y": 330
                },
                "z": 3,
                "parent": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                "embeds": [],
                "iscontainedinside": [
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9",
                    "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                ]
            },
            "cb325154-069b-44f7-844e-1f9cfa6e33d6": {
                "source": {
                    "id": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                },
                "target": {
                    "id": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                },
                "z": 2
            },
            "0dac6c62-879a-48e0-9c4d-d16d48e74de1": {
                "source": {
                    "id": "b66c528a-223a-4b86-86dd-d1a60d0b6c93"
                },
                "target": {
                    "id": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                },
                "z": 2
            },
            "8dfdd15e-ba14-47a6-9556-9d35750f4834": {
                "size": {
                    "width": 420,
                    "height": 330
                },
                "position": {
                    "x": 90,
                    "y": 810
                },
                "z": 2,
                "parent": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                "embeds": [
                    "926f4917-389c-4228-9e9b-deb0ea0f2a64",
                    "b60963ba-5033-4213-bf90-a4cf025fb20b",
                    "a756759c-f87e-4ba9-beb6-dd72bb432768",
                    "0488b6fb-7981-4fba-880e-8f3ce74e9d82",
                    "1d5acc30-279e-4d8c-8cc3-1c4fe8bc051a"
                ],
                "iscontainedinside": [
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918",
                    "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                ]
            },
            "926f4917-389c-4228-9e9b-deb0ea0f2a64": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 870
                },
                "z": 3,
                "parent": "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                "embeds": [],
                "iscontainedinside": [
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                ]
            },
            "b60963ba-5033-4213-bf90-a4cf025fb20b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 240,
                    "y": 870
                },
                "z": 3,
                "parent": "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                "embeds": [],
                "iscontainedinside": [
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                ]
            },
            "a756759c-f87e-4ba9-beb6-dd72bb432768": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 120,
                    "y": 990
                },
                "z": 3,
                "parent": "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                "embeds": [],
                "iscontainedinside": [
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                ]
            },
            "0488b6fb-7981-4fba-880e-8f3ce74e9d82": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 240,
                    "y": 990
                },
                "z": 3,
                "parent": "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                "embeds": [],
                "iscontainedinside": [
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                ]
            },
            "1d5acc30-279e-4d8c-8cc3-1c4fe8bc051a": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 360,
                    "y": 870
                },
                "z": 3,
                "parent": "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                "embeds": [],
                "iscontainedinside": [
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834",
                    "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                ]
            },
            "e424f11d-7595-4acb-a2de-1facbb08170b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 1830,
                    "y": 90
                },
                "z": 1,
                "embeds": [],
                "isassociatedwith": [
                    "a17fb2d1-71f7-4a11-97ef-12f12f857bf5"
                ],
                "dependson": [
                    "1d5acc30-279e-4d8c-8cc3-1c4fe8bc051a"
                ]
            },
            "4280e05f-3c6d-47e3-b6e6-14b4b904aadf": {
                "source": {
                    "id": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                },
                "target": {
                    "id": "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                },
                "z": 2
            },
            "b8b1e487-6ab2-4c35-9045-07ae5aad5ce7": {
                "source": {
                    "id": "b66c528a-223a-4b86-86dd-d1a60d0b6c93"
                },
                "target": {
                    "id": "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                },
                "z": 2
            },
            "4dd49e48-875e-4101-896e-02109f11108c": {
                "size": {
                    "width": 600,
                    "height": 510
                },
                "position": {
                    "x": 60,
                    "y": 1380
                },
                "z": 1,
                "embeds": [
                    "62cf08b8-c402-440e-b9e0-3809e191de3b",
                    "50046e3f-4d7a-4aae-90e3-38f7df5318f8",
                    "b4252920-5b8b-427b-831c-9e4e98b63817",
                    "ac360d30-f127-45c6-80b9-e244caad9a00",
                    "90952a7b-ea94-44e6-9601-faf4af0e54ad",
                    "c96fceb3-2c68-49aa-9db8-a2b824ecaab7",
                    "3652580b-9e7c-44be-888c-23248ef0feb6",
                    "97f54b2e-7316-4fc6-989e-9f912e55d0ba",
                    "f22d0dbd-36f2-41c2-a529-592f3a392175",
                    "4915aa9c-6f98-4820-88f1-5b5cf1848291",
                    "dc4a3347-81be-4ca6-81c1-14f568ba70b4",
                    "ee384576-3e7b-4385-90e6-f87db3b02ad8"
                ]
            },
            "62cf08b8-c402-440e-b9e0-3809e191de3b": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 1440
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "50046e3f-4d7a-4aae-90e3-38f7df5318f8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 210,
                    "y": 1440
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "b4252920-5b8b-427b-831c-9e4e98b63817": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 1560
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "ac360d30-f127-45c6-80b9-e244caad9a00": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 210,
                    "y": 1560
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "90952a7b-ea94-44e6-9601-faf4af0e54ad": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 1440
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "c96fceb3-2c68-49aa-9db8-a2b824ecaab7": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 1560
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "3652580b-9e7c-44be-888c-23248ef0feb6": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 90,
                    "y": 1680
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "97f54b2e-7316-4fc6-989e-9f912e55d0ba": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 210,
                    "y": 1680
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "f22d0dbd-36f2-41c2-a529-592f3a392175": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 330,
                    "y": 1680
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "4915aa9c-6f98-4820-88f1-5b5cf1848291": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 450,
                    "y": 1440
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "dc4a3347-81be-4ca6-81c1-14f568ba70b4": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 450,
                    "y": 1560
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            },
            "ee384576-3e7b-4385-90e6-f87db3b02ad8": {
                "size": {
                    "width": 60,
                    "height": 60
                },
                "position": {
                    "x": 450,
                    "y": 1680
                },
                "z": 2,
                "parent": "4dd49e48-875e-4101-896e-02109f11108c",
                "embeds": [],
                "dependson": [
                    "4dd49e48-875e-4101-896e-02109f11108c"
                ]
            }
        }
    },
    "Conditions": {
        "CreateNode0": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateNode1": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateNode2": {
            "Fn::Equals": [
                true,
                true
            ]
        },
        "CreateNode3": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        5
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        6
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateNode4": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        5
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        6
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateNode5": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        6
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateNode6": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        0,
                        1
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterNodes"
                        },
                        7
                    ]
                }
            ]
        },
        "CreateReplica0": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        1
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        2
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        3
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica1": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        2
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        3
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica2": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        3
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica3": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        4
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        },
        "CreateReplica4": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        0,
                        1
                    ]
                },
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ReadReplicas"
                        },
                        5
                    ]
                }
            ]
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "InstanceTenancy": "default",
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jVPC",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "2cd43f6e-8a59-4b7c-b95d-ec02eeca8918"
                }
            }
        },
        "DNSZone": {
            "Type": "AWS::Route53::HostedZone",
            "DependsOn": "VPC",
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": "Zone to define private DNS for neo4j nodes"
                },
                "Name": "neo4j",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VPC"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ],
                "HostedZoneTags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jPrivateZone",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4dd49e48-875e-4101-896e-02109f11108c"
                }
            }
        },
        "Subnet0": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jSubnet0",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "MapPublicIpOnLaunch": "true"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8dfdd15e-ba14-47a6-9556-9d35750f4834"
                }
            }
        },
        "SubnetRouteTableAssociation0": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet0"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b8b1e487-6ab2-4c35-9045-07ae5aad5ce7"
                }
            }
        },
        "SubnetNetworkAclAssociation0": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet0"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4280e05f-3c6d-47e3-b6e6-14b4b904aadf"
                }
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.1.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jSubnet1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "MapPublicIpOnLaunch": "true"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d8c812f9-0aa5-4e3f-b573-3e404daab2b9"
                }
            }
        },
        "SubnetRouteTableAssociation1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet1"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0dac6c62-879a-48e0-9c4d-d16d48e74de1"
                }
            }
        },
        "SubnetNetworkAclAssociation1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "cb325154-069b-44f7-844e-1f9cfa6e33d6"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jGateway",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "aced6b9e-c5c4-47c7-a137-0c961f83e6fa"
                }
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "30af5ae6-553b-4b39-88c2-94e74e8f6d58"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "Neo4jRouteTable",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b66c528a-223a-4b86-86dd-d1a60d0b6c93"
                }
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b7fafa36-b1bf-4434-816f-d83aff06b6a1"
                }
            }
        },
        "NetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b1913c57-ce14-4b5e-84f7-b0d5ed866c74"
                }
            }
        },
        "SSHIngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5c885d68-d6dd-44c9-9dc3-5b6ff1126b3b"
                }
            }
        },
        "SSHEgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4ef074a8-ea34-4cd5-a76c-157d0493bf54"
                }
            }
        },
        "BoltIngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "7689",
                    "To": "7689"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "9d1c85ec-7b06-4ae7-b62e-9eae3605bf04"
                }
            }
        },
        "BoltEgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "104",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "7689",
                    "To": "7689"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "71f0eaa8-ebdd-46fe-9c8a-cdd770092365"
                }
            }
        },
        "Neo4jHTTPSIngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "103",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "7473",
                    "To": "7473"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "d50f9015-7800-4a7d-be39-6f7bc296a136"
                }
            }
        },
        "Neo4jHTTPSEgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "106",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "7473",
                    "To": "7473"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0982d403-3dd4-4ce4-8e0e-fc1f447d29a9"
                }
            }
        },
        "HTTPSIngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "104",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "07dd2b35-f958-4917-84c3-fdee7e1147e4"
                }
            }
        },
        "HTTPSEgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "108",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "434fdde5-067b-4734-83a1-7b19aa6b8e35"
                }
            }
        },
        "HTTPIngressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "105",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a110120c-eb07-45a8-8c77-6df07acd4a13"
                }
            }
        },
        "HTTPEgressNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "110",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "dc86fcc3-249e-49de-912a-b82031ac0c8b"
                }
            }
        },
        "Int1NetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "201",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "10.0.0.0/16",
                "PortRange": {
                    "From": "5000",
                    "To": "5000"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "051f966c-815d-4bff-b405-015d94fcb304"
                }
            }
        },
        "Int2NetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "202",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "10.0.0.0/16",
                "PortRange": {
                    "From": "6000",
                    "To": "6000"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8c1baa7d-d799-48e9-9ac8-29d17cb13285"
                }
            }
        },
        "Int3NetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "203",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "10.0.0.0/16",
                "PortRange": {
                    "From": "7000",
                    "To": "7000"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f2b779bf-bc08-48dd-b7cf-7ebbc7f35f3d"
                }
            }
        },
        "InboundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "300",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "475865d2-dede-46c3-8c33-db1bb4af8289"
                }
            }
        },
        "OutBoundResponsePortsNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "NetworkAcl"
                },
                "RuleNumber": "301",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": {
                    "Ref": "NetworkWhitelist"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "eaa5255e-665c-42fe-af28-5e80cc555bfa"
                }
            }
        },
        "ReadOwnTags": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            "work-with-tags",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:CreateTags",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "elasticloadbalancing:Describe*",
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:ListMetrics",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:Describe*"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "autoscaling:Describe*",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c495b0d6-3e9b-454c-8252-9d1d60827651"
                }
            }
        },
        "instProfNeo4jEnterprise": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "ReadOwnTags"
                    }
                ],
                "InstanceProfileName": {
                    "Fn::Join": [
                        "-",
                        [
                            "read-self-tags-ip",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "76daeb39-ae23-49ea-93db-f9ac47fe733d"
                }
            }
        },
        "sgNeo4jEnterprise": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "Neo4j Ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5000",
                        "ToPort": "5000",
                        "CidrIp": "10.0.0.0/16"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "6000",
                        "ToPort": "6000",
                        "CidrIp": "10.0.0.0/16"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7000",
                        "ToPort": "7000",
                        "CidrIp": "10.0.0.0/16"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7687",
                        "ToPort": "7687",
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "7473",
                        "ToPort": "7473",
                        "CidrIp": {
                            "Ref": "NetworkWhitelist"
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b4b9b1b0-006d-4975-b7d5-1d7f98b0f366"
                }
            }
        },
        "Neo4jServer0DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode0",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 0.",
                "Name": "node0.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer0",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ee384576-3e7b-4385-90e6-f87db3b02ad8"
                }
            }
        },
        "Neo4jServer0": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode0",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-0",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "0"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1d5acc30-279e-4d8c-8cc3-1c4fe8bc051a"
                }
            }
        },
        "Neo4jServer1DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode1",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 1.",
                "Name": "node1.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer1",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "dc4a3347-81be-4ca6-81c1-14f568ba70b4"
                }
            }
        },
        "Neo4jServer1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode1",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "1"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "df5ca911-72a6-497c-8c58-22add5b716da"
                }
            }
        },
        "Neo4jServer2DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode2",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 2.",
                "Name": "node2.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer2",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "4915aa9c-6f98-4820-88f1-5b5cf1848291"
                }
            }
        },
        "Neo4jServer2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode2",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-2",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "2"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1402d479-c92d-428a-b90c-949c6df1564d"
                }
            }
        },
        "Neo4jServer3DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode3",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 3.",
                "Name": "node3.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer3",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f22d0dbd-36f2-41c2-a529-592f3a392175"
                }
            }
        },
        "Neo4jServer3": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode3",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-3",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "3"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0488b6fb-7981-4fba-880e-8f3ce74e9d82"
                }
            }
        },
        "Neo4jServer4DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode4",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 4.",
                "Name": "node4.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer4",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "97f54b2e-7316-4fc6-989e-9f912e55d0ba"
                }
            }
        },
        "Neo4jServer4": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode4",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-4",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "4"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "05193dd2-0e47-4629-bfea-93db2f6604a7"
                }
            }
        },
        "Neo4jServer5DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode5",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 5.",
                "Name": "node5.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer5",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3652580b-9e7c-44be-888c-23248ef0feb6"
                }
            }
        },
        "Neo4jServer5": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode5",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true"
                    },
                    {
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-5",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "5"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "baf37ea7-6e8f-4201-b4c6-85085aa83e75"
                }
            }
        },
        "Neo4jServer6DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateNode6",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j node 6.",
                "Name": "node6.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer6",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "c96fceb3-2c68-49aa-9db8-a2b824ecaab7"
                }
            }
        },
        "Neo4jServer6": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateNode6",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-CORE-vm-6",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "CORE"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "6"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a756759c-f87e-4ba9-beb6-dd72bb432768"
                }
            }
        },
        "Neo4jReplica0DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateReplica0",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j replica 0.",
                "Name": "replica0.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer0",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "90952a7b-ea94-44e6-9601-faf4af0e54ad"
                }
            }
        },
        "Neo4jReplica0": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateReplica0",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-0",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "0"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b60963ba-5033-4213-bf90-a4cf025fb20b"
                }
            }
        },
        "Neo4jReplica1DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateReplica1",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j replica 1.",
                "Name": "replica1.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer1",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ac360d30-f127-45c6-80b9-e244caad9a00"
                }
            }
        },
        "Neo4jReplica1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateReplica1",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-1",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "1"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1baf0bf1-e412-4cfa-b409-01e1cb84e7f0"
                }
            }
        },
        "Neo4jReplica2DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateReplica2",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j replica 2.",
                "Name": "replica2.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer2",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "b4252920-5b8b-427b-831c-9e4e98b63817"
                }
            }
        },
        "Neo4jReplica2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateReplica2",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true"
                    },
                    {
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-2",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "2"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "049a51f6-244b-4564-92dd-7b4e26c39f53"
                }
            }
        },
        "Neo4jReplica3DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateReplica3",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j replica 3.",
                "Name": "replica3.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer3",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "50046e3f-4d7a-4aae-90e3-38f7df5318f8"
                }
            }
        },
        "Neo4jReplica3": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateReplica3",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet0"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-3",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "3"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "926f4917-389c-4228-9e9b-deb0ea0f2a64"
                }
            }
        },
        "Neo4jReplica4DNS": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateReplica4",
            "DependsOn": "DNSZone",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "DNSZone"
                },
                "Comment": "DNS names for neo4j replica 4.",
                "Name": "replica4.neo4j.",
                "Type": "A",
                "TTL": "900",
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "Neo4jServer4",
                            "PrivateIp"
                        ]
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "62cf08b8-c402-440e-b9e0-3809e191de3b"
                }
            }
        },
        "Neo4jReplica4": {
            "Type": "AWS::EC2::Instance",
            "Condition": "CreateReplica4",
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "instProfNeo4jEnterprise"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Fn::GetAZs": {
                                "Ref": "AWS::Region"
                            }
                        }
                    ]
                },
                "DisableApiTermination": "FALSE",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionArch2AMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "sgNeo4jEnterprise"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "Monitoring": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    "neo4j-READ_REPLICA-vm-4",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "neo4j_mode",
                        "Value": "cluster"
                    },
                    {
                        "Key": "dbms_mode",
                        "Value": "READ_REPLICA"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
                        "Value": "3"
                    },
                    {
                        "Key": "causal_clustering_initial_discovery_members",
                        "Value": {
                            "Fn::Join": [
                                ",",
                                [
                                    "node0.neo4j:5000",
                                    "node1.neo4j:5000",
                                    "node2.neo4j:5000"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "initial_password",
                        "Value": {
                            "Ref": "Password"
                        }
                    },
                    {
                        "Key": "InstanceID",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "4"
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "#\n",
                                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                                "LOGFILE=/home/ubuntu/setup.log\n",
                                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                                "\n",
                                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "export API=http://169.254.169.254/latest/\n",
                                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                                "env | tee -a $LOGFILE\n",
                                "# Tag volumes, which CloudFormation does not allow\n",
                                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                                "# Format EBS storage, and mount it in Neo4j directory\n",
                                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                                "mount -a 2>&1 | tee -a $LOGFILE\n",
                                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "sudo apt-get update\n",
                                "mkdir aws-cfn-bootstrap-latest\n",
                                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                                "easy_install aws-cfn-bootstrap-latest\n",
                                "\n",
                                "echo Stack ID '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | tee -a $LOGFILE\n",
                                "export STACK_TOKEN=$(echo '",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                "' | base64 | tail -c 12)\n",
                                "# Loop waiting for neo4j service to start.\n",
                                "while true; do\n",
                                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                                "        echo `date` 'Neo4j is up; changing default password' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        curl -v -H 'Content-Type: application/json' \\n",
                                "                -XPOST -d '{\"password\":\"",
                                {
                                    "Ref": "Password"
                                },
                                "\"}' \\\n",
                                "                -u neo4j:neo4j \\\n",
                                "                http://localhost:7474/user/neo4j/password \\\n",
                                "                2>&1 | tee -a $LOGFILE\n",
                                "        echo `date` 'Password reset; a graph user is you!' 2>&1 | tee -a $LOGFILE\n",
                                "\n",
                                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                                "        break\n",
                                "    fi\n",
                                "\n",
                                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                                "    sleep 1\n",
                                "done\n",
                                "\n",
                                "echo Signaling stack success | tee -a $LOGFILE\n",
                                "/usr/local/bin/cfn-signal --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\\n",
                                "       --id $EC2_INSTANCE_ID \\\n",
                                "       --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " \\\n",
                                "       --success true -d \"$STACK_TOKEN\" '",
                                {
                                    "Ref": "StackTokenWaitHandle"
                                },
                                "' 2>&1 | tee -a $LOGFILE \n"
                            ]
                        ]
                    }
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": "10",
                            "DeleteOnTermination": "true"
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "VolumeSize": {
                                "Ref": "VolumeSizeGB"
                            },
                            "Encrypted": {
                                "Ref": "EncryptDataVolume"
                            }
                        }
                    }
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3d3aab22-dfc3-4999-af8d-422f5723175b"
                }
            }
        },
        "StackTokenWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "a17fb2d1-71f7-4a11-97ef-12f12f857bf5"
                }
            }
        },
        "WaitOnPasswordReset": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Neo4jServer0",
            "Properties": {
                "Handle": {
                    "Ref": "StackTokenWaitHandle"
                },
                "Timeout": "900",
                "Count": "1"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "e424f11d-7595-4acb-a2de-1facbb08170b"
                }
            }
        }
    },
    "Outputs": {
        "Note": {
            "Value": {
                "Fn::Join": [
                    "\n",
                    [
                        "Your cluster is deployed, and currently forming.",
                        "Now is a good time to get a cup of coffee, the ",
                        "URL below should be available within a few minutes"
                    ]
                ]
            }
        },
        "Neo4jWebadmin": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer1",
                                "PublicIp"
                            ]
                        },
                        ":7473/"
                    ]
                ]
            },
            "Description": "This is the address of your Neo4j server web administration console."
        },
        "Username": {
            "Value": "neo4j"
        },
        "Password": {
            "Value": {
                "Ref": "Password"
            }
        },
        "SSH": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh -i ${HOME}/.ssh/",
                        {
                            "Ref": "SSHKeyName"
                        },
                        ".pem -l ubuntu@",
                        {
                            "Fn::GetAtt": [
                                "Neo4jServer1",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            },
            "Description": "This is how you gain remote access to the machine."
        },
        "Node0Ip": {
            "Value": {
                "Fn::GetAtt": [
                    "Neo4jServer0",
                    "PublicIp"
                ]
            }
        },
        "Node1Ip": {
            "Value": {
                "Fn::GetAtt": [
                    "Neo4jServer1",
                    "PublicIp"
                ]
            }
        },
        "Node2Ip": {
            "Value": {
                "Fn::GetAtt": [
                    "Neo4jServer2",
                    "PublicIp"
                ]
            }
        }
    }
}
